name: Workflow

on:
  push: null
  schedule:
    - cron: '0 12 * * *'

jobs:

  cabal:
    runs-on: ubuntu-22.04
    name: Cabal
    steps:
      - uses: actions/checkout@v2

      - run: cabal check

  hlint:
    runs-on: ubuntu-22.04
    name: HLint
    steps:
      - uses: actions/checkout@v2

      - uses: tfausak/hlint-action@v1

  ormolu:
    runs-on: ubuntu-22.04
    name: Ormolu
    steps:
      - uses: actions/checkout@v2

      - uses: mrkkrp/ormolu-action@v6

  build:
    strategy:
      matrix:
        include:
          - platform: macos
            version: 12
          - platform: ubuntu
            version: 22.04
          - platform: windows
            version: 2022
            extension: .exe
    runs-on: ${{ matrix.platform }}-${{ matrix.version }}
    name: Build on ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - run: mkdir artifact

      - if: matrix.platform == 'ubuntu'
        run: |
          cp -R data LICENSE.txt README.markdown artifact
          cabal sdist --output-dir artifact

      - id: artifact
        run: echo '::set-output name=directory::artifact/${{ matrix.platform }}'

      - run: mkdir ${{ steps.artifact.outputs.directory }}

      - id: setup-haskell
        uses: haskell/actions/setup@v2
        with:
          ghc-version: 9.2.2

      - run: cabal configure --enable-optimization=2 --enable-tests --flags pedantic --jobs

      - run: cabal freeze

      - run: cat cabal.project.freeze

      - run: cp cabal.project.freeze ${{ steps.artifact.outputs.directory }}

      - run: cabal outdated --v2-freeze-file cabal.project.freeze

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ matrix.platform }}/${{ hashFiles('cabal.project.freeze') }}
          restore-keys: ${{ matrix.platform }}/

      - run: cabal build --only-dependencies

      - run: cabal build

      - run: echo '::add-matcher::.github/hspec-problem-matcher.json'

      - run: cabal run -- monadoc-test-suite --fail-on-focused --randomize

      - run: cp "$( cabal list-bin monadoc )" ${{ steps.artifact.outputs.directory }}

      - uses: svenstaro/upx-action@v2
        with:
          file: ${{ steps.artifact.outputs.directory }}/monadoc${{ matrix.extension }}

      - uses: actions/upload-artifact@v2
        with:
          name: monadoc-${{ github.sha }}
          path: artifact

  docker:
    needs: build
    runs-on: ubuntu-22.04
    name: Docker
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: monadoc-${{ github.sha }}
          path: artifact

      - run: mv artifact/data docker

      - run: chmod +x artifact/ubuntu/monadoc

      - run: mv artifact/ubuntu/monadoc docker

      - id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=false
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v2
        with:
          context: docker
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'schedule' }}
          tags: ${{ steps.meta.outputs.tags }}
